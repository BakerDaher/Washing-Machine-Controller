library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity main_tb is
end main_tb;

architecture Behavioral of main_tb is

  -- Component declarations
  component main
    Port (
      Clock       : in  std_logic;
      start       : in  std_logic;
      reset       : in  std_logic;
      leds        : out std_logic_vector(1 downto 0);
      userMode    : in  std_logic_vector(4 downto 0);
      SevSegData  : out std_logic_vector(6 downto 0);
      SevSegDriver: out std_logic_vector(7 downto 0)
    );
  end component;

  -- Signal declarations
  signal Clock_tb   : std_logic := '0';
  signal start_tb   : std_logic := '0';
  signal reset_tb   : std_logic := '0';
  signal leds_tb    : std_logic_vector(1 downto 0);
  signal userMode_tb: std_logic_vector(4 downto 0);
  signal SevSegData_tb  : std_logic_vector(6 downto 0);
  signal SevSegDriver_tb: std_logic_vector(7 downto 0);

begin

  -- Instantiate the main entity
  DUT: main
    port map (
      Clock       => Clock_tb,
      start       => start_tb,
      reset       => reset_tb,
      leds        => leds_tb,
      userMode    => userMode_tb,
      SevSegData  => SevSegData_tb,
      SevSegDriver=> SevSegDriver_tb
    );

  -- Clock process
  clk_process: process
  begin
    while now < 1000 ms loop  -- Simulate for 1 second (1000 ms)
      Clock_tb <= '0';
      wait for 100 us;  -- Half of the period (1 / (2 * 5000 Hz) = 100 us)
      Clock_tb <= '1';
      wait for 100 us;  -- Half of the period
    end loop;
    wait;
  end process;

  -- Stimulus process
  stimulus_process: process
  begin
    reset_tb <= '1';
    start_tb <= '0';
    userMode_tb <= "00000";
    wait for 200 us;
    reset_tb <= '0';
    wait for 400 us;
    start_tb <= '1';
    userMode_tb <= "11111";
    wait for 2000 us;
    start_tb <= '0';
    wait for 1000 us;
    start_tb <= '1';
    userMode_tb <= "01010";
    wait for 1500 us;
    start_tb <= '0';
    wait;
  end process;

end Behavioral;
